#!/bin/bash
# shellcheck disable=SC2129
#
# Copyright 2023 The qm Authors
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; If not, see <http://www.gnu.org/licenses/>.

get_ip_container() {
    container_name="${1}"
    container_interface="${2}"

    IP_CONTROL_MACHINE=$(
        podman exec \
                "${container_name}" \
                ip -brief address show "${container_interface}" | awk '{print $3}' | awk -F/ '{print $1}'
    )

    echo "${IP_CONTROL_MACHINE}"
}

create_container() {
    container_file="${1}"
    container_name="${2}"
    container_tag="${3}"

    # Execute build with tag for latest
    podman build \
            -q \
            -f "${container_file}" \
            --tag "${container_tag}" 1> /dev/null

    # Get the image id
    IMAGE_ID=$(podman images "${container_name}" -n  | awk '{print $3}' | uniq)

    # Execute the container
    podman run -d \
                --privileged \
                --name "${container_name}" \
                --hostname "${container_name}" \
                "${IMAGE_ID}" 1> /dev/null

    podman exec "${container_name}" echo "${PODS_DNS}" > /etc/resolv.conf

}

setup_node() {
        nodeID="${1}"
        ip_control_machine="${2}"

        # copy control as template to node${number}
        cp ContainerFile.control ContainerFile.node"${nodeID}"

        # remove specific code from control mode (template)
        sed -i '/start/,/end/d' ContainerFile.node"${nodeID}"
}

create_qm_node() {
    # Generates 'N' containers QM nodes as required for the test scale

    for nodeID in $(seq 1 "${NUMBER_OF_NODES}") ;
    do
        # Generates the Container.node${ID}
        setup_node \
            "${nodeID}" \
            "$(get_ip_container "${CONTROL_CONTAINER_NAME}" "${NET_INTERFACE_IP_CONTROL}")"

        # Add final instructions
	echo "RUN dnf -y copr enable rhcontainerbot/qm centos-stream-9 &> /dev/null" >> ContainerFile.node"${nodeID}"
        echo "RUN dnf -y copr enable mperina/hirte-snapshot centos-stream-9 &> /dev/null" >> ContainerFile.node"${nodeID}"
        echo "RUN dnf update -y &> /dev/null" >> ContainerFile.node"${nodeID}"
        echo "RUN dnf install qm -y &> /dev/null" >> ContainerFile.node"${nodeID}"

	# Execute qm setup
	echo "RUN /usr/share/qm/setup 2>&1 > /tmp/qm-setup.log || echo "QM setup failed, please check /tmp/qm-setup.log."" >> ContainerFile.node"${nodeID}"

	# HACK: add /dev/fuse to qm.container. It will allow a container set limits inside
	# another container.
	echo 'RUN echo "AddDevice=-/dev/fuse" >> /usr/share/containers/systemd/qm.container' >> ContainerFile.node"${nodeID}"

	# Enable hirte-agent
	echo 'RUN cp /usr/share/hirte-agent/config/agent.conf /etc/hirte/agent.conf.d/agent.conf' >> ContainerFile.node"${nodeID}"
        echo 'RUN sed -i -e "s/NodeName=/NodeName='"node${nodeID}/"\" \
                '-e "s/^ManagerHost=/ManagerHost='"${ip_control_machine}/"\" \
                ' /etc/hirte/agent.conf.d/agent.conf' >> ContainerFile.node"${nodeID}"
        echo "RUN systemctl enable hirte-agent &> /dev/null" >> ContainerFile.node"${nodeID}"

	# Add systemd as CMD
        echo "CMD [\"/usr/lib/systemd/systemd\"]" >> ContainerFile.node"${nodeID}"

        # create the container ${nodeID}
        info_message "Creating container \033[92mnode${nodeID}\033[0m [\033[92mQM mode\033[0m]"
        create_container \
                ContainerFile.node"${nodeID}" \
                node"${nodeID}" "node${nodeID}:latest"

	# qm - after the setup, reload daemon and start qm
	podman exec node"${nodeID}" systemctl daemon-reload &> /dev/null
	podman exec node"${nodeID}" systemctl start qm &> /dev/null

	# set in the QM container the ManagerHost (Control Machine) and restart hirte-agent	
	podman exec node"${nodeID}" \
		podman exec qm cp /usr/share/hirte-agent/config/agent.conf /etc/hirte/agent.conf.d/agent.conf

	# get the QM nodename from /etc/hirte/agent.conf (env var $NodeName) INSIDE node$ID
	# FIXME: /etc/hirte/agent.conf should be deprecated soon.
	qm_node_name=$(podman exec node"${nodeID}" \
		podman exec qm cat /etc/hirte/agent.conf | grep NodeName= | awk -F'=' '{print $2}')

	# removing old agent.conf location
	podman exec node"${nodeID}" \
		podman exec qm rm -f /etc/hirte/agent.conf

	NODES_FOR_TESTING+=("${qm_node_name}")

	IP_CONTROL_NODE=$(get_ip_container "${CONTROL_CONTAINER_NAME}" "${NET_INTERFACE_IP_CONTROL}")
	podman exec node"${nodeID}" \
		podman exec qm sed -i 's/^ManagerHost=/ManagerHost='"${IP_CONTROL_NODE}"'/g' /etc/hirte/agent.conf.d/agent.conf

	podman exec node"${nodeID}" \
		podman exec qm sed -i 's/^NodeName=/NodeName='"${qm_node_name}"'/g' /etc/hirte/agent.conf.d/agent.conf
	
        # restarting the qm hirte-agent	
	podman exec node"${nodeID}" \
		podman exec qm systemctl restart hirte-agent

	# CONTROL NODE: append QM node into /etc/hirte/agent.conf.din the control node the new qm node name
	podman exec "${CONTROL_CONTAINER_NAME}" sed -i '/^AllowedNodeNames=/ s/$/,'"${qm_node_name}"'/' /etc/hirte/hirte.conf.d/hirte.conf

	# restart the hirte service
	podman exec "${CONTROL_CONTAINER_NAME}" systemctl restart hirte
    done
}

create_asil_node() {
    # Creates the control container - a.k.a ASIL
    info_message "Creating container \033[92m${CONTROL_CONTAINER_NAME}\033[0m [\033[92mASIL mode\033[0m]"
    create_container \
        "ContainerFile.control" \
        "${CONTROL_CONTAINER_NAME}" \
        "${TAG_CONTROL_MACHINE}"
}
